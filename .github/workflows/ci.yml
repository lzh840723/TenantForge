name: CI

on:
  push:
    branches: [ main, feat/backend-scaffold ]
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend-ci:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Set up Maven cache
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Run backend tests (push)
        if: github.event_name != 'pull_request'
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          DIRECT_CONNECTION: ${{ secrets.DIRECT_CONNECTION }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JAVA_TOOL_OPTIONS: -Djava.net.preferIPv4Stack=true
        run: mvn -f backend/pom.xml -Dmaven.wagon.http.retryHandler.count=5 -B -Djacoco.skip=true -DskipITs=true -DfailIfNoTests=false clean test

      - name: Run backend tests (PR)
        if: github.event_name == 'pull_request'
        env:
          JAVA_TOOL_OPTIONS: -Djava.net.preferIPv4Stack=true
        run: mvn -f backend/pom.xml -Dmaven.wagon.http.retryHandler.count=5 -B -DskipITs=true -DfailIfNoTests=false clean test

      - name: Setup Python for diff coverage (PR)
        if: github.event_name == 'pull_request'
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install diff-cover (PR)
        if: github.event_name == 'pull_request'
        run: pip install --no-cache-dir diff-cover

      - name: Diff coverage report (non-blocking)
        if: github.event_name == 'pull_request'
        run: |
          git fetch --no-tags --prune --depth=1 origin "${{ github.base_ref }}"
          diff-cover backend/target/site/jacoco/jacoco.xml \
            --compare-branch "origin/${{ github.base_ref }}" \
            --html-report diff-coverage.html \
            --json-report diff-coverage.json || true
          diff-cover backend/target/site/jacoco/jacoco.xml \
            --compare-branch "origin/${{ github.base_ref }}" | tee diff-coverage.txt || true

      - name: Upload diff coverage artifacts
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: diff-coverage-report
          path: |
            diff-coverage.html
            diff-coverage.json
            diff-coverage.txt
          if-no-files-found: warn

      - name: Enforce diff coverage >= 90% (label: cov-gate)
        if: github.event_name == 'pull_request' && contains(join(github.event.pull_request.labels.*.name, ','), 'cov-gate')
        run: |
          git fetch --no-tags --prune --depth=1 origin "${{ github.base_ref }}"
          diff-cover backend/target/site/jacoco/jacoco.xml \
            --compare-branch "origin/${{ github.base_ref }}" \
            --fail-under=90

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-reports
          path: |
            backend/target/surefire-reports/**
            backend/target/failsafe-reports/**
          if-no-files-found: ignore

      # Postgres Testcontainers integration tests (RUN_PG_IT) are opt-in and not run by default in CI

      - name: Upload performance artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: perf-artifacts
          path: backend/target/artifacts/
          if-no-files-found: ignore

      # Diff coverage gating can be enabled later once stable; keep jacoco.xml artifact for reviewers

  deploy-backend:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: backend-ci
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: Deploy backend to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
          RAILWAY_ENVIRONMENT_ID: ${{ secrets.RAILWAY_ENVIRONMENT_ID }}
          RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
          RAILWAY_SERVICE_NAME: ${{ secrets.RAILWAY_SERVICE_NAME }}
          RAILWAY_ENVIRONMENT_NAME: ${{ secrets.RAILWAY_ENVIRONMENT_NAME }}
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          DIRECT_CONNECTION: ${{ secrets.DIRECT_CONNECTION }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          if [ -z "$RAILWAY_TOKEN" ]; then
            echo "RAILWAY_TOKEN not provided; skipping backend deploy" && exit 0
          fi
          export PATH="$HOME/.railway/bin:$PATH"
          ./scripts/railway-deploy.sh

      - name: Ensure Railway domain (generate if missing)
        if: env.RAILWAY_TOKEN != ''
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_SERVICE_NAME: ${{ secrets.RAILWAY_SERVICE_NAME }}
        run: |
          export PATH="$HOME/.railway/bin:$PATH"
          svc_name="${RAILWAY_SERVICE_NAME:-TenantForge}"
          set -e
          # Try to fetch status first; if domain list empty, generate one
          railway status --json > status.json || true
          have_domain=$(jq -r '.services.edges[0].node.serviceInstances.edges[0].node.domains.serviceDomains | length > 0' status.json 2>/dev/null || echo false)
          if [ "$have_domain" != "true" ]; then
            # Try to generate domain; tolerate failure to keep CI green
            if railway domain -s "$svc_name" -p 8080 --json > domain.json; then
              :
            else
              echo "Failed to create domain (non-fatal)." >&2
              echo '{}' > domain.json
            fi
          else
            jq '{domain: .services.edges[0].node.serviceInstances.edges[0].node.domains.serviceDomains[0].domain}' status.json > domain.json
          fi
          DOMAIN=$(jq -r '.domain // empty' domain.json)
          echo "RAILWAY_DOMAIN=$DOMAIN" >> $GITHUB_ENV

      - name: Persist default backend base to frontend/config.js
        if: env.RAILWAY_DOMAIN != ''
        run: |
          set -e
          file=frontend/config.js
          domain="https://$RAILWAY_DOMAIN"
          if grep -q "^window.BACKEND_BASE_URL" "$file"; then
            sed -i.bak "s|^window.BACKEND_BASE_URL.*|window.BACKEND_BASE_URL = '$domain';|" "$file"
          else
            printf "\nwindow.BACKEND_BASE_URL = '%s';\n" "$domain" >> "$file"
          fi
          rm -f "$file.bak"
          git config user.email "actions@github.com"
          git config user.name "github-actions[bot]"
          git add "$file"
          git commit -m "chore(frontend): set default backend base to $RAILWAY_DOMAIN" || echo "No changes"
          git push || echo "No changes to push"

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: backend-ci
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy Frontend
        working-directory: frontend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          if [ -z "$VERCEL_TOKEN" ]; then
            echo "VERCEL_TOKEN not set; skipping frontend deploy" && exit 0
          fi
          if [[ "$VERCEL_TOKEN" == *%* ]]; then
            echo "VERCEL_TOKEN contains unsupported characters; skipping frontend deploy" && exit 0
          fi
          ARGS=("--token" "$VERCEL_TOKEN" "--prebuilt" "--prod" "--yes")
          if [ -n "$VERCEL_ORG_ID" ]; then
            ARGS+=("--scope" "$VERCEL_ORG_ID")
          fi
          if [ -n "$VERCEL_PROJECT_ID" ]; then
            ARGS+=("--project" "$VERCEL_PROJECT_ID")
          fi
          vercel deploy "${ARGS[@]}"
