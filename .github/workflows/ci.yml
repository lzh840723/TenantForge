name: CI

on:
  push:
    branches: [ main, feat/backend-scaffold ]
  pull_request:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
      SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
      DIRECT_CONNECTION: ${{ secrets.DIRECT_CONNECTION }}
      GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
      GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
      KOYEB_API_KEY: ${{ secrets.KOYEB_API_KEY }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      KOYEB_APP_NAME: tenantforge-api
      KOYEB_SERVICE_NAME: tenantforge-service
      IMAGE_TAG: ghcr.io/${{ secrets.GHCR_USERNAME }}/tenantforge-backend:${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Set up Maven cache
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Run tests
        run: mvn -f backend/pom.xml clean verify

      - name: Log in to GHCR
        run: echo $GHCR_TOKEN | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin

      - name: Build Docker image
        run: docker build -t "$IMAGE_TAG" backend

      - name: Push Docker image
        run: docker push "$IMAGE_TAG"

      - name: Deploy to Koyeb
        run: |
          if ! koyeb app get "$KOYEB_APP_NAME" --token "$KOYEB_API_KEY" >/dev/null 2>&1; then
            koyeb app create "$KOYEB_APP_NAME" --token "$KOYEB_API_KEY"
          fi
          koyeb service deploy "$KOYEB_SERVICE_NAME" \
            --token "$KOYEB_API_KEY" \
            --app "$KOYEB_APP_NAME" \
            --container image="$IMAGE_TAG" \
            --env SPRING_DATASOURCE_URL="$SPRING_DATASOURCE_URL" \
            --env SPRING_DATASOURCE_USERNAME="$SPRING_DATASOURCE_USERNAME" \
            --env SPRING_DATASOURCE_PASSWORD="$SPRING_DATASOURCE_PASSWORD" \
            --env DIRECT_CONNECTION="$DIRECT_CONNECTION" \
            --env JWT_SECRET="$JWT_SECRET" \
            --ports http:8080 \
            --strategy rolling
        env:
          KOYEB_APP_NAME: ${{ env.KOYEB_APP_NAME }}
          KOYEB_SERVICE_NAME: ${{ env.KOYEB_SERVICE_NAME }}
          KOYEB_API_KEY: ${{ secrets.KOYEB_API_KEY }}
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          DIRECT_CONNECTION: ${{ secrets.DIRECT_CONNECTION }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          GHCR_USERNAME: ${{ env.GHCR_USERNAME }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy Frontend
        working-directory: frontend
        run: |
          vercel deploy \
            --token "$VERCEL_TOKEN" \
            --scope "$VERCEL_ORG_ID" \
            --project "$VERCEL_PROJECT_ID" \
            --prebuilt \
            --prod
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
