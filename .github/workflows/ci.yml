name: CI

on:
  push:
    branches: [ main, feat/backend-scaffold ]
  pull_request:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Set up Maven cache
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Run tests
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          DIRECT_CONNECTION: ${{ secrets.DIRECT_CONNECTION }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: mvn -f backend/pom.xml clean verify

      - name: Build & push image
        run: |
          IMAGE_TAG="ghcr.io/${{ github.repository_owner }}/tenantforge-backend:${{ github.sha }}"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "${{ github.token }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          docker build -t "$IMAGE_TAG" backend
          docker push "$IMAGE_TAG"

      - name: Deploy to Koyeb
        env:
          KOYEB_API_KEY: ${{ secrets.KOYEB_API_KEY }}
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          DIRECT_CONNECTION: ${{ secrets.DIRECT_CONNECTION }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          if [ -z "$KOYEB_API_KEY" ]; then
            echo "KOYEB_API_KEY not set; skipping" && exit 1
          fi
          KOYEB_APP_NAME=tenantforge-api
          KOYEB_SERVICE_NAME=tenantforge-service
          if ! koyeb app get "$KOYEB_APP_NAME" --token "$KOYEB_API_KEY" >/dev/null 2>&1; then
            koyeb app create "$KOYEB_APP_NAME" --token "$KOYEB_API_KEY"
          fi
          if [ -z "$IMAGE_TAG" ]; then
            IMAGE_TAG="ghcr.io/${{ github.repository_owner }}/tenantforge-backend:${{ github.sha }}"
          fi
          koyeb service deploy "$KOYEB_SERVICE_NAME" \
            --token "$KOYEB_API_KEY" \
            --app "$KOYEB_APP_NAME" \
            --container image="$IMAGE_TAG" \
            --env SPRING_DATASOURCE_URL="$SPRING_DATASOURCE_URL" \
            --env SPRING_DATASOURCE_USERNAME="$SPRING_DATASOURCE_USERNAME" \
            --env SPRING_DATASOURCE_PASSWORD="$SPRING_DATASOURCE_PASSWORD" \
            --env DIRECT_CONNECTION="$DIRECT_CONNECTION" \
            --env JWT_SECRET="$JWT_SECRET" \
            --ports http:8080 \
            --strategy rolling

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy Frontend
        working-directory: frontend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          if [ -z "$VERCEL_TOKEN" ]; then
            echo "VERCEL_TOKEN not set; skipping frontend deploy" && exit 0
          fi
          ARGS=("--token" "$VERCEL_TOKEN" "--prebuilt" "--prod" "--yes")
          if [ -n "$VERCEL_ORG_ID" ]; then
            ARGS+=("--scope" "$VERCEL_ORG_ID")
          fi
          if [ -n "$VERCEL_PROJECT_ID" ]; then
            ARGS+=("--project" "$VERCEL_PROJECT_ID")
          fi
          vercel deploy "${ARGS[@]}"
